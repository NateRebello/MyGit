#!/usr/bin/env python3
# Manages branches in the mygit repository - lists, creates, or deletes branches

import os
import sys
import filecmp

def main():
    program_name = os.path.basename(sys.argv[0])
    
    if not os.path.exists(".mygit"):
        print(f"{program_name}: error: mygit repository directory .mygit not found", file=sys.stderr)
        sys.exit(1)
    
    branches_dir = ".mygit/branches"
    commits_dir = ".mygit/commits"
    
    if len(sys.argv) == 1:
        if not os.path.exists(commits_dir) or not any(d.isdigit() for d in os.listdir(commits_dir)):
            print(f"{program_name}: error: this command can not be run until after the first commit", file=sys.stderr)
            sys.exit(1)
        branches = sorted(os.listdir(branches_dir))
        for branch in branches:
            print(branch)
        return
    
    if len(sys.argv) == 2:
        branch_name = sys.argv[1]
        branch_path = os.path.join(branches_dir, branch_name)
        if os.path.exists(branch_path):
            print(f"{program_name}: error: branch '{branch_name}' already exists", file=sys.stderr)
            sys.exit(1)
        with open(".mygit/HEAD", "r") as f:
            current_branch = f.read().strip()
        with open(os.path.join(branches_dir, current_branch), "r") as f:
            commit_number = f.read().strip()
        with open(branch_path, "w") as f:
            f.write(commit_number + "\n")
        return
    
    if len(sys.argv) == 3 and sys.argv[1] == "-d":
        branch_name = sys.argv[2]
        branch_path = os.path.join(branches_dir, branch_name)
        if not os.path.exists(branch_path):
            print(f"{program_name}: error: branch '{branch_name}' doesn't exist", file=sys.stderr)
            sys.exit(1)
        if branch_name == "trunk":
            print(f"{program_name}: error: can not delete branch 'trunk': default branch", file=sys.stderr)
            sys.exit(1)
        with open(".mygit/HEAD", "r") as f:
            current_branch = f.read().strip()
        if branch_name == current_branch:
            print(f"{program_name}: error: can not delete branch '{branch_name}': current branch", file=sys.stderr)
            sys.exit(1)
        
        with open(os.path.join(branches_dir, branch_name), "r") as f:
            target_commit = f.read().strip()
        with open(os.path.join(branches_dir, current_branch), "r") as f:
            current_commit = f.read().strip()
        
        target_commit_dir = os.path.join(commits_dir, target_commit)
        current_commit_dir = os.path.join(commits_dir, current_commit)
        if os.path.exists(target_commit_dir) and os.path.exists(current_commit_dir):
            target_files = set(os.listdir(target_commit_dir)) if os.path.exists(target_commit_dir) else set()
            current_files = set(os.listdir(current_commit_dir)) if os.path.exists(current_commit_dir) else set()
            if target_files - current_files:
                print(f"{program_name}: error: branch '{branch_name}' has unmerged changes", file=sys.stderr)
                sys.exit(1)
            for filename in target_files & current_files:
                if not filecmp.cmp(os.path.join(target_commit_dir, filename), os.path.join(current_commit_dir, filename), shallow=False):
                    print(f"{program_name}: error: branch '{branch_name}' has unmerged changes", file=sys.stderr)
                    sys.exit(1)
        
        os.remove(branch_path)
        print(f"Deleted branch '{branch_name}'")
        return
    
    print(f"usage: {program_name}: [-d branch-name] [branch-name]", file=sys.stderr)
    sys.exit(1)

if __name__ == "__main__":
    main() 