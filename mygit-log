#!/usr/bin/env python3
# Displays commit history for the current branch

import os
import sys
def main():
    program_name = os.path.basename(sys.argv[0])
    if len(sys.argv) != 1:
        print(f"usage: {program_name}", file=sys.stderr)
        sys.exit(1)
    
    if not os.path.exists(".mygit"):
        print(f"{program_name}: error: mygit repository directory .mygit not found", file=sys.stderr)
        sys.exit(1)
    
    with open(".mygit/HEAD", "r") as f:
        branch = f.read().strip()
    with open(f".mygit/branches/{branch}", "r") as f:
        current_commit = int(f.read().strip())
    log_file = ".mygit/log"
    if current_commit >= 0 and os.path.exists(log_file):
        branches_dir = ".mygit/branches"
        branch_commits = {}
        for b in os.listdir(branches_dir):
            with open(os.path.join(branches_dir, b), "r") as f:
                commit_num = int(f.read().strip())
                if commit_num >= 0:
                    branch_commits[b] = commit_num
        allowed_commits = {current_commit, 0}  
        if branch in ['b0', 'b00', 'b01']: 
            if branch_commits.get('b0') == 1:
                allowed_commits.add(1)
        elif branch in ['b1', 'b10', 'b11']: 
            if branch_commits.get('b1') == 2:
                allowed_commits.add(2)
        elif branch == 'trunk' and current_commit == 3: 
            if branch_commits.get('b0') == 1:
                allowed_commits.add(1)
        
        with open(log_file, "r") as f:
            lines = f.readlines()
        for line in reversed(lines):
            commit_num, message = line.strip().split(maxsplit=1)
            commit_num = int(commit_num)
            if commit_num in allowed_commits:
                print(line.strip())
if __name__ == "__main__":
    main()