#!/usr/bin/env python3
# Removes files from the mygit repository index and optionally from the working directory

import os
import sys
import filecmp

def main():
    program_name = os.path.basename(sys.argv[0])
    args = sys.argv[1:]
    
    force = "--force" in args
    cached = "--cached" in args
    if force:
        args.remove("--force")
    if cached:
        args.remove("--cached")
    filenames = args
    
    if not filenames:
        print(f"usage: {program_name} [--force] [--cached] <filenames>", file=sys.stderr)
        sys.exit(1)
    
    if not os.path.exists(".mygit"):
        print(f"{program_name}: error: mygit repository directory .mygit not found", file=sys.stderr)
        sys.exit(1)
    
    with open(".mygit/HEAD", "r") as f:
        branch = f.read().strip()
    with open(f".mygit/branches/{branch}", "r") as f:
        current_commit = int(f.read().strip())
    repo_dir = f".mygit/commits/{current_commit}" if current_commit >= 0 else None
    
    index_dir = ".mygit/index"
    for filename in filenames:
        index_path = os.path.join(index_dir, filename)
        repo_path = os.path.join(repo_dir, filename) if repo_dir else None
        working_path = filename
        
        if not os.path.exists(index_path):
            print(f"{program_name}: error: '{filename}' is not in the mygit repository", file=sys.stderr)
            sys.exit(1)
        
        if not cached and not force:
            if os.path.exists(working_path) and repo_path and os.path.exists(repo_path):
                if not filecmp.cmp(index_path, working_path, shallow=False) and not filecmp.cmp(index_path, repo_path, shallow=False):
                    print(f"{program_name}: error: '{filename}' in index is different to both the working file and the repository", file=sys.stderr)
                    sys.exit(1)
            if repo_path and os.path.exists(repo_path):
                if not filecmp.cmp(index_path, repo_path, shallow=False):
                    print(f"{program_name}: error: '{filename}' has staged changes in the index", file=sys.stderr)
                    sys.exit(1)
            elif os.path.exists(index_path):
                print(f"{program_name}: error: '{filename}' has staged changes in the index", file=sys.stderr)
                sys.exit(1)
            if os.path.exists(working_path) and repo_path and os.path.exists(repo_path):
                if not filecmp.cmp(working_path, repo_path, shallow=False):
                    print(f"{program_name}: error: '{filename}' in the repository is different to the working file", file=sys.stderr)
                    sys.exit(1)
        if cached and not force:
            if os.path.exists(working_path) and repo_path and os.path.exists(repo_path):
                if not filecmp.cmp(index_path, working_path, shallow=False) and not filecmp.cmp(index_path, repo_path, shallow=False):
                    print(f"{program_name}: error: '{filename}' in index is different to both the working file and the repository", file=sys.stderr)
                    sys.exit(1)
        if os.path.exists(index_path):
            os.remove(index_path)
        if not cached and os.path.exists(working_path):
            os.remove(working_path)

if __name__ == "__main__":
    main() 